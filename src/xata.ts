// Generated by Xata Codegen 0.28.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type { BaseClientOptions, SchemaInference, XataRecord } from "@xata.io/client";

const tables = [
  {
    name: "reviews",
    columns: [
      { name: "cigar", type: "link", link: { table: "cigars" } },
      { name: "rating", type: "float", notNull: true, defaultValue: "0" },
      { name: "reviewText", type: "text" },
      { name: "userId", type: "string", notNull: true, defaultValue: "null" },
      {
        name: "images",
        type: "file[]",
        "file[]": { defaultPublicAccess: true },
      },
      {
        name: "smokedOn",
        type: "datetime",
        notNull: true,
        defaultValue: "now",
      },
      { name: "price", type: "float" },
    ],
  },
  {
    name: "cigars",
    columns: [
      { name: "name", type: "string" },
      { name: "manufacturer", type: "string" },
      { name: "country", type: "string" },
    ],
    revLinks: [{ column: "cigar", table: "reviews" }],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Reviews = InferredTypes["reviews"];
export type ReviewsRecord = Reviews & XataRecord;

export type Cigars = InferredTypes["cigars"];
export type CigarsRecord = Cigars & XataRecord;

export type DatabaseSchema = {
  reviews: ReviewsRecord;
  cigars: CigarsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://Carlos-Garcia-s-workspace-pk4k6s.us-east-1.xata.sh/db/puros",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
